#+OPTIONS: \n:t, toc:nil
#+AUTHOR:
#+TITLE:VM

* TODO before opensource                                           :noexport:
** TODO Readme
*** DONE übersetzen
*** TODO anpassen
** DONE travis einrichten
** TODO C-Code rauswerfen
*** TODO gui nachbauen
*** TODO nogui ohne deps
*** TODO sig_std_logic ersetzen
    sollte mit RefCells gehen
** TODO aufräumen
*** TODO doppelten Code in cpu.rs entfernen mit inline_always
*** TODO dynasm nur verwenden, wenn mit jit kompiliert wird?

* AVR-VM

  This is a VM for the AVR ATmega32 microcontroller written in Rust.
  It can handle most of the instructions and has support for I/O, ADC,
  timer and button interrupts. It also features a JIT compiler, which
  compiles the AVR bytecode to x64 machinecode at runtime. It is quite
  fast, about 5x faster than the real microcontroller.

  This VM was built as part of an university course, so it is not under current
  development. But if you want to use it and have a problem, feel free
  to open an issue or a PR.

  Since the code for the GUI was supplied by the professor, the code
  is currently only working with the ~no_gui~ feature, see below.

  Some test programs can be found in ~./test~. The VM is only tested to
  work with these programs. Only the instructions of these programs
  are currently implemented (which are quite a few, but not all).

** Installation
   For using this VM you need to do the following steps:

   1. clone this repository

   2. This project uses [[https://github.com/CensoredUsername/dynasm-rs][Dynasm-rs]] for the JIT-compiler, which is a
      compiler plugin and needs the nightly Rust compiler. A working
      version can be installed using [[https://rustup.rs/][Rustup]]:
      ~rustup override set nightly-2017-02-13~

   3. For running the tests and compiling C-Code and assembler to AVR
      bytecode, ~gcc-avr~ is needed. It can be installed either from
      [[http://www.atmel.com/tools/ATMELAVRTOOLCHAINFORLINUX.aspx]]
      or on Ubuntu/Debian/BashOnWindows using
      ~sudo apt-get install gcc-avr~
      If you are using a different distribution, you can probably find
      an equivalent package there.

** Usage
   You can execute the VM using the following command:
   ~cargo run --release -- ./test/jump/jump.bin~

   All bytes, which are written to ~UDR~ by the microcontroller, are
   displayed in the console.

   You can exucute a different binary by changing ~./test/jump/jump.bin~.
*** Without GUI
    The GUI can be disabled using
    ~cargo run --release --features no_gui -- ./test/jump/jump.bin~
*** Without JIT
    The JIT-Compiler can be disabled with the following flags and the
    VM falls back to an emulating mode:
    ~cargo run --release --features interpret -- ./test/jump/jump.bin~
** Material
    - [[http://www.atmel.com/images/Atmel-0856-AVR-Instruction-Set-Manual.pdf][Instruction Set]]
    - [[http://www.atmel.com/images/doc2503.pdf][Hardware Description]]

* Intern                                                           :noexport:
** Toolchain
   https://www.heise.de/ct/projekte/machmit/ctbot/wiki/AVRToolchain
** Rust und C
   https://bluishcoder.co.nz/2013/08/08/linking_and_calling_rust_functions_from_c.html
   http://stackoverflow.com/questions/29444606/linking-rust-dylib-into-c-program
   http://stackoverflow.com/questions/37929165/rust-and-c-linking-problems-with-minimal-program-and-no-std
** Rust im CIP
   - http://edunham.net/2015/11/17/installing_rust_without_root.html
   - Downloadadresse ist: https://static.rust-lang.org/dist/rust-1.13.0-x86_64-unknown-linux-gnu.tar.gz
   - im ciptmp entpacken, da ansonsten zu groß
   - ./install.sh --prefix=...
   - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:~/<...>/lib"
   - ~/.cargo ins ciptmp verschieben und symlinken, da sonst groß
** sig_std_logic
   - U: undefiniert, nicht alle Geräte haben was angelegt
   - Z: unverbunden
   - 0: auf 0 gezogen
   - 1: auf 1 gezogen
   - X: auf 0 und 1 gezogen
   - L: schwache 0
   - H: schwache 1
   - W: schwache 0 & 1
** DDR & PORT
   Soll-Werte, die an den Pins angelegt werden sollen:
   | DDR | PORT | OUT |
   | 0   | 0    | Z   |
   | 0   | 1    | H   |
   | 1   | 0    | 0   |
   | 1   | 1    | 1   |
